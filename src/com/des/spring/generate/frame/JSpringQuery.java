/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.des.spring.generate.frame;

import com.des.generate.GenerateFile;
import com.des.schemadb.SchemaDB;
import com.des.schemadb.model.SchemaField;
import com.des.schemadb.model.SchemaTable;
import com.des.session.Session;
import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/**
 *
 * @author Surachai
 */
public class JSpringQuery extends javax.swing.JPanel {

    /**
     * Creates new form JSpringQuery
     */
    private SchemaDB DB;
    private static final String DEFAULT_OPERATION = "---- select Operation ----";
    private static final String DEFAULT_RETURN = "-- select Return type --";
    private static final String INSERT = "Insert";
    private static final String UPDATE = "Update";
    private static final String DELETE = "Delete";
    private static final String SELECT = "Select";
    private static final String OTHER = "Other";
    JSpringGenerate j;
    GenerateFile g;

    public JSpringQuery() {
        initComponents();
        j = new JSpringGenerate();
        g = new GenerateFile();
        Vector Items = new Vector();
        Items.add(DEFAULT_OPERATION);
        Items.add(INSERT);
        Items.add(UPDATE);
        Items.add(DELETE);
        Items.add(SELECT);
        Items.add(OTHER);
        Vector ReturnItems = new Vector();
        ReturnItems.add(DEFAULT_RETURN);
        ReturnItems.add("List<Model>");
        ReturnItems.add("Model");
        ReturnItems.add("void");
        ReturnItems.add("boolean");
        ReturnItems.add("int");
        ReturnItems.add("String");

        DefaultComboBoxModel model = new DefaultComboBoxModel(Items);
        operationSel.setModel(model);
        model = new DefaultComboBoxModel(ReturnItems);
        returnSel.setModel(model);
        SelectDBList.setEnabled(false);
        SelectFieldList.setEnabled(false);

    }

    public SchemaDB getDB() {
        return DB;
    }

    public void setDB(SchemaDB DB) {
        this.DB = DB;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SCGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tablenameTxt = new javax.swing.JTextField();
        getBut = new javax.swing.JButton();
        AddOperateBut = new javax.swing.JButton();
        TitleNameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CreateModelBut = new javax.swing.JButton();
        operationSel = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SelectDBList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        SelectFieldList = new javax.swing.JList();
        TitleSelect = new javax.swing.JLabel();
        TitleCondition = new javax.swing.JLabel();
        MoveSelAttBut = new javax.swing.JButton();
        RemoveSelAttBut = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        conditionList = new javax.swing.JList();
        UPListBut = new javax.swing.JButton();
        DownListBut = new javax.swing.JButton();
        SelRadio = new javax.swing.JRadioButton();
        ConRadio = new javax.swing.JRadioButton();
        TitleCon = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        QueryArea = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        TagValueTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TagNameTxt = new javax.swing.JTextField();
        GenerateBut = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        FunctionTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        returnSel = new javax.swing.JComboBox();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 255), null), "Table"));

        jLabel1.setText("Table Name");

        getBut.setText("Get Field");
        getBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getButActionPerformed(evt);
            }
        });

        AddOperateBut.setText("Init");
        AddOperateBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddOperateButActionPerformed(evt);
            }
        });

        jLabel3.setText("Title Name");

        CreateModelBut.setText("CreateModel");
        CreateModelBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateModelButActionPerformed(evt);
            }
        });

        operationSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        operationSel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                operationSelItemStateChanged(evt);
            }
        });

        jLabel2.setText("Operation");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(operationSel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tablenameTxt)
                    .addComponent(TitleNameTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(CreateModelBut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(getBut, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AddOperateBut, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablenameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getBut)
                    .addComponent(CreateModelBut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(7, 7, 7)
                .addComponent(TitleNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AddOperateBut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(operationSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 255), null), "Field"));

        jScrollPane1.setViewportView(SelectDBList);

        jScrollPane2.setViewportView(SelectFieldList);

        TitleSelect.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        TitleSelect.setText("     ");

        TitleCondition.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        TitleCondition.setText("     ");

        MoveSelAttBut.setText(">");
        MoveSelAttBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveSelAttButActionPerformed(evt);
            }
        });

        RemoveSelAttBut.setText("<");
        RemoveSelAttBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveSelAttButActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(conditionList);

        UPListBut.setText("U");
        UPListBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPListButActionPerformed(evt);
            }
        });

        DownListBut.setText("D");
        DownListBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownListButActionPerformed(evt);
            }
        });

        SCGroup.add(SelRadio);
        SelRadio.setText("S");

        SCGroup.add(ConRadio);
        ConRadio.setText("C");

        TitleCon.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        TitleCon.setText("             ");

        jLabel7.setText("SelectList :");

        jLabel9.setText("conditionList :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UPListBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DownListBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SelRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ConRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RemoveSelAttBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(MoveSelAttBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TitleSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(13, 13, 13)
                        .addComponent(TitleCondition))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TitleCon, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TitleSelect)
                    .addComponent(jLabel7))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(TitleCondition))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(MoveSelAttBut)
                                .addGap(6, 6, 6)
                                .addComponent(RemoveSelAttBut)
                                .addGap(6, 6, 6)
                                .addComponent(UPListBut))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(TitleCon)
                                    .addComponent(jLabel9))))
                        .addGap(1, 1, 1)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(DownListBut)
                                .addGap(2, 2, 2)
                                .addComponent(SelRadio)
                                .addGap(3, 3, 3)
                                .addComponent(ConRadio))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 255), null), "Manual Query"));

        QueryArea.setColumns(20);
        QueryArea.setRows(5);
        jScrollPane4.setViewportView(QueryArea);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(204, 204, 255), null), "Function Generator"));

        jLabel5.setText("TagValue");

        jLabel6.setText("TagName");

        GenerateBut.setText("Generate");
        GenerateBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateButActionPerformed(evt);
            }
        });

        jLabel4.setText("Function");

        jLabel8.setText("Return");

        returnSel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6))
                .addGap(23, 23, 23)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(FunctionTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(TagNameTxt))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(returnSel, 0, 164, Short.MAX_VALUE)
                    .addComponent(TagValueTxt))
                .addGap(31, 31, 31)
                .addComponent(GenerateBut, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(FunctionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(returnSel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel5))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(TagNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TagValueTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GenerateBut)))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void getButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getButActionPerformed
        // TODO add your handling code here:
        if (tablenameTxt.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "please fill in Tablename");
        } else {
            SchemaTable tableDetail = DB.getSchemaTable(tablenameTxt.getText());
            List<SchemaField> Field = tableDetail.getListFieldDetail();
            DefaultListModel model = new DefaultListModel();
            for (int i = 0; i < Field.size(); i++) {
                model.addElement(Field.get(i).getColumnName());
            }
            SelectDBList.setModel(model);
            SelectDBList.setEnabled(true);
            //SelectFieldList.setModel(model);           
        }

    }//GEN-LAST:event_getButActionPerformed

    private void operationSelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_operationSelItemStateChanged
        // TODO add your handling code here:
        String selectValue = operationSel.getSelectedItem().toString();
        if (selectValue.equalsIgnoreCase(INSERT)) {
            // set title name
            TitleSelect.setText("INSERT");
            TitleCon.setText("    ");
            // set list enable
            SelectFieldList.setEnabled(true);
            conditionList.setEnabled(false);
            setDefaultFunctionGen("INSERT_TAG", "INSERT", "Insert", 5);
            SelRadio.setSelected(true);
        } else if (selectValue.equalsIgnoreCase(UPDATE)) {
            // set title name
            TitleSelect.setText("UPDATE");
            TitleCon.setText("WHERE");
            // set list enable
            SelectFieldList.setEnabled(true);
            conditionList.setEnabled(true);
            setDefaultFunctionGen("UPDATE_TAG", "UPDATE", "Update", 5);
            SelRadio.setSelected(true);
        } else if (selectValue.equalsIgnoreCase(SELECT)) {
            // set title name
            TitleSelect.setText("SELECT");
            TitleCon.setText("WHERE");
            // set list enable
            SelectFieldList.setEnabled(true);
            conditionList.setEnabled(true);

            SelRadio.setSelected(true);
            setDefaultFunctionGen("SELECT_TAG", "SELECT", "Get", 1);
        } else if (selectValue.equalsIgnoreCase(DELETE)) {
            // set title name
            TitleSelect.setText("DELETE");
            TitleCon.setText("WHERE");
            // set list enable
            conditionList.setEnabled(true);
            SelectFieldList.setEnabled(false);
            setDefaultFunctionGen("DELETE_TAG", "DELETE", "Delete", 5);
        } else if (selectValue.equalsIgnoreCase(OTHER)) {
            // set title name
            TitleSelect.setText("parameter");
            TitleCon.setText(" ");
            // set list enable
            SelectFieldList.setEnabled(true);
            conditionList.setEnabled(false);
            setDefaultFunctionGen("", "", "", 0);
        } else if (selectValue.equalsIgnoreCase(DEFAULT_OPERATION)) {
            // set title name
            TitleSelect.setText("  ");
            TitleCon.setText(" ");
            // set list enable
            SelectFieldList.setEnabled(false);
            conditionList.setEnabled(false);
            setDefaultFunctionGen("", "", "", 0);
        }
    }//GEN-LAST:event_operationSelItemStateChanged

    public void setDefaultFunctionGen(String TagName, String TagValue, String Function, int returnIndex) {
        TagNameTxt.setText(TagName);
        TagValueTxt.setText(TagValue);
        FunctionTxt.setText(Function + tablenameTxt.getText());
        returnSel.setSelectedIndex(returnIndex);
    }
    private void CreateModelButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateModelButActionPerformed
        // TODO add your handling code here:
        Session session = Session.Getinstance();
        Map<String, Object> map = session.getMap();
        if (tablenameTxt.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "please fill in Tablename");
        } else {
            try {

                map.put("modelname", getJAVAFileName(tablenameTxt.getText()));
                List<String> typelist = new LinkedList<String>();
                List<String> attibutelist = new LinkedList<String>();
                SchemaTable tableDetail = DB.getSchemaTable(tablenameTxt.getText());
                List<SchemaField> Field = tableDetail.getListFieldDetail();

                for (int i = 0; i < Field.size(); i++) {
                    attibutelist.add(Field.get(i).getColumnName());
                    typelist.add(Field.get(i).getType());
                }
                map.put("typename", typelist);
                map.put("attibutename", attibutelist);
                int isReplace = 0;
                String result = j.GenerateFromTag("CreateModel", map, false);
                System.out.println("result :"+result);
                if (g.IsFail(result)) {
                    isReplace = JOptionPane.showConfirmDialog(this, result);
                    System.out.println("isReplace : "+isReplace);
                    if(isReplace == 0){
                        j.GenerateFromTag("CreateModel", map, true);
                        j.GenerateFromTag("AddAttibute", map, true);
                        j.GenerateFromTag("GETSET", map, true);
                        alertDialog("create model success");
                    }
                } else {
                    j.GenerateFromTag("AddAttibute", map, true);
                    j.GenerateFromTag("GETSET", map, true);
                    alertDialog("create model success");
                }
                
                
            } catch (IOException ex) {
                Logger.getLogger(JSpringQuery.class.getName()).log(Level.SEVERE, null, ex);
                alertDialog("cannot create model:" + ex.toString());
            }
        }

    }//GEN-LAST:event_CreateModelButActionPerformed

    private void AddOperateButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddOperateButActionPerformed
        // TODO add your handling code here:
        Session session = Session.Getinstance();
        Map<String, Object> map = session.getMap();
        map.put("modelname", getJAVAFileName(tablenameTxt.getText()));
        map.put("titlename", TitleNameTxt.getText());
        if (TitleNameTxt.getText().equalsIgnoreCase("")) {
            JOptionPane.showMessageDialog(this, "please fill in TitleName");
        } else {
            try {
                j.GenerateFromTag("AddSpringBean", map, false);
                j.GenerateFromTag("AddSpringQuery", map, false);
                j.GenerateFromTag("CreateBean", map, false);
                j.GenerateFromTag("CreateQuery", map, false);
                j.GenerateFromTag("CreateService", map, false);
                j.GenerateFromTag("GenHeadQuery", map, false);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_AddOperateButActionPerformed

    private void GenerateButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateButActionPerformed
        // TODO add your handling code here:
        Session session = Session.Getinstance();
        Map<String, Object> map = session.getMap();
        List<String> selList = getListStringFromModel(SelectFieldList.getModel());
        List<String> whereList = getListStringFromModel(conditionList.getModel());
        List<String> QueryList = new LinkedList<String>();

        if (selList.size() != 0) {
            QueryList = selList;
        }

        for (int i = 0; i < whereList.size(); i++) {
            QueryList.add(whereList.get(i));
        }
        map.put("fieldname", QueryList);
        map.put("returntype", returnSel.getSelectedItem().toString().replaceAll("Model", tablenameTxt.getText()));
        map.put("functionname", FunctionTxt.getText());
        map.put("modelname", getJAVAFileName(tablenameTxt.getText()));
        map.put("titlename", TitleNameTxt.getText());
        map.put("tagname", TagNameTxt.getText());
        map.put("tagvalue", TagValueTxt.getText());

        if (operationSel.getSelectedItem().toString().equalsIgnoreCase(INSERT)) {
            map.put("query", DB.generateInsertQuery(getJAVAFileName(tablenameTxt.getText()), selList));
        } else if (operationSel.getSelectedItem().toString().equalsIgnoreCase(UPDATE)) {
            map.put("query", DB.generateUpdateQuery(getJAVAFileName(tablenameTxt.getText()), selList, whereList));
        } else if (operationSel.getSelectedItem().toString().equalsIgnoreCase(SELECT)) {
            map.put("query", DB.generateSelectQuery(getJAVAFileName(tablenameTxt.getText()), selList, whereList));
        } else if (operationSel.getSelectedItem().toString().equalsIgnoreCase(DELETE)) {
            map.put("query", DB.generateDeleteQuery(getJAVAFileName(tablenameTxt.getText()), whereList));
        } else if (operationSel.getSelectedItem().toString().equalsIgnoreCase(OTHER)) {
            map.put("query", QueryArea.getText());
            //selList = getListStringFromModel(SelectFieldList.getModel());
            //whereList = getListStringFromModel(conditionList.getModel()); 

        }

        try {
            j.GenerateFromTag("DeclareJDBCTag", map, false);
            if (operationSel.getSelectedIndex() == 4) {
                j.GenerateFromTag("AddJDBCSelect", map, false);
            } else {
                j.GenerateFromTag("AddJDBCADU", map, false);
            }
            j.GenerateFromTag("AddServiceInterface", map, false);
            j.GenerateFromTag("AddBeanimplements", map, false);
            j.GenerateFromTag("GenValueQuery", map, false);

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_GenerateButActionPerformed

    private void MoveSelAttButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveSelAttButActionPerformed
        // TODO add your handling code here:

        if (!SelRadio.isSelected() && !ConRadio.isSelected()) {
            JOptionPane.showMessageDialog(this, "please select List from radio button");
        } else {
            if (SelectDBList.getSelectedValue() == null) {
                JOptionPane.showMessageDialog(this, "please select row");
            } else {
                if (SelRadio.isSelected()) {
                    if (SelectFieldList.isEnabled()) {
                        List<String> SelList = getListStringFromModel(SelectFieldList.getModel());
                        List FieldSel = SelectDBList.getSelectedValuesList();
                        for (int i = 0; i < FieldSel.size(); i++) {
                            SelList.add(FieldSel.get(i).toString());
                        }
                        SelectFieldList.setModel(getModelFromList(SelList));
                    } else {
                        JOptionPane.showMessageDialog(this, "SelectList is Disable");
                    }
                } else if (ConRadio.isSelected()) {
                    if (conditionList.isEnabled()) {
                        List<String> ConList = getListStringFromModel(conditionList.getModel());
                        List FieldSel = SelectDBList.getSelectedValuesList();
                        for (int i = 0; i < FieldSel.size(); i++) {
                            ConList.add(FieldSel.get(i).toString());
                        }
                        conditionList.setModel(getModelFromList(ConList));
                    } else {
                        JOptionPane.showMessageDialog(this, "ConditionList is Disable");
                    }
                } else {

                }
            }
        }


    }//GEN-LAST:event_MoveSelAttButActionPerformed

    private void RemoveSelAttButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveSelAttButActionPerformed
        // TODO add your handling code here:
        if (!SelRadio.isSelected() && !ConRadio.isSelected()) {
            JOptionPane.showMessageDialog(this, "please select List from radio button");
        } else {
            if (SelRadio.isSelected()) {
                if (SelectFieldList.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "please select row");
                } else if (!SelectFieldList.isEnabled()) {
                    JOptionPane.showMessageDialog(this, "SelectList is disabled");
                } else {
                    List<String> SelList = getListStringFromModel(SelectFieldList.getModel());
                    int[] sel = SelectFieldList.getSelectedIndices();
                    List<Integer> selIndexList = new LinkedList<Integer>();
                    for (int i = 0; i < sel.length; i++) {
                        selIndexList.add(sel[i]);
                    }
                    Collections.sort(selIndexList);
                    for (int i = selIndexList.size() - 1; i >= 0; i--) {
                        SelList.remove(selIndexList.get(i).intValue());
                    }
                    SelectFieldList.setModel(getModelFromList(SelList));
                }
            } else if (ConRadio.isSelected()) {
                if (conditionList.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "please select row");
                } else if (!conditionList.isEnabled()) {
                    JOptionPane.showMessageDialog(this, "ConditionList is disabled");
                } else {
                    List<String> ConList = getListStringFromModel(conditionList.getModel());
                    int[] sel = conditionList.getSelectedIndices();
                    List<Integer> conIndexList = new LinkedList<Integer>();
                    for (int i = 0; i < sel.length; i++) {
                        conIndexList.add(sel[i]);
                    }
                    Collections.sort(conIndexList);
                    for (int i = conIndexList.size() - 1; i >= 0; i--) {
                        ConList.remove(conIndexList.get(i).intValue());
                    }
                    conditionList.setModel(getModelFromList(ConList));
                }
            }

        }
    }//GEN-LAST:event_RemoveSelAttButActionPerformed

    private void UPListButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPListButActionPerformed
        // TODO add your handling code here:
        if (!SelRadio.isSelected() && !ConRadio.isSelected()) {
            JOptionPane.showMessageDialog(this, "please select List from radio button");
        } else {
            if (SelRadio.isSelected()) {
                if (SelectFieldList.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "please select row");
                } else if (!SelectFieldList.isEnabled()) {
                    JOptionPane.showMessageDialog(this, "SelectList is disabled");
                } else {
                    List<String> SelList = getListStringFromModel(SelectFieldList.getModel());
                    int[] sel = SelectFieldList.getSelectedIndices();
                    for (int i = 0; i < sel.length; i++) {
                        if (sel[i] != 0) {
                            SelList = swapList(SelList, sel[i], sel[i] - 1);
                            //set new position
                            sel[i] = sel[i] - 1;
                        }
                    }
                    SelectFieldList.setModel(getModelFromList(SelList));
                    //set selected new position
                    SelectFieldList.setSelectedIndices(sel);

                }
            } else if (ConRadio.isSelected()) {
                if (conditionList.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "please select row");
                } else if (!conditionList.isEnabled()) {
                    JOptionPane.showMessageDialog(this, "ConditionList is disabled");
                } else {
                    List<String> ConList = getListStringFromModel(conditionList.getModel());
                    int[] sel = conditionList.getSelectedIndices();
                    for (int i = 0; i < sel.length; i++) {
                        if (sel[i] != 0) {
                            ConList = swapList(ConList, sel[i], sel[i] - 1);
                            //set new position
                            sel[i] = sel[i] - 1;
                        }
                    }
                    conditionList.setModel(getModelFromList(ConList));
                    //set selected new position
                    conditionList.setSelectedIndices(sel);
                }

            }

        }
    }//GEN-LAST:event_UPListButActionPerformed

    public List<String> swapList(List<String> swap, int OlePosition, int NewPosition) {
        String temp = swap.get(NewPosition);
        swap.set(NewPosition, swap.get(OlePosition));
        swap.set(OlePosition, temp);
        return swap;
    }

    public void alertDialog(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    private void DownListButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownListButActionPerformed
        // TODO add your handling code here:
        if (!SelRadio.isSelected() && !ConRadio.isSelected()) {
            JOptionPane.showMessageDialog(this, "please select List from radio button");
        } else {
            if (SelRadio.isSelected()) {
                if (SelectFieldList.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "please select row");
                } else if (!SelectFieldList.isEnabled()) {
                    JOptionPane.showMessageDialog(this, "SelectList is disabled");
                } else {
                    List<String> SelList = getListStringFromModel(SelectFieldList.getModel());
                    int[] sel = SelectFieldList.getSelectedIndices();
                    for (int i = sel.length - 1; i >= 0; i--) {
                        if (sel[i] < SelList.size() - 1) {
                            SelList = swapList(SelList, sel[i], sel[i] + 1);
                            //set new position
                            sel[i] = sel[i] + 1;
                        }
                    }
                    SelectFieldList.setModel(getModelFromList(SelList));
                    //set selected new position
                    SelectFieldList.setSelectedIndices(sel);

                }
            } else if (ConRadio.isSelected()) {
                if (conditionList.getSelectedValue() == null) {
                    JOptionPane.showMessageDialog(this, "please select row");
                } else if (!conditionList.isEnabled()) {
                    JOptionPane.showMessageDialog(this, "ConditionList is disabled");
                } else {
                    List<String> ConList = getListStringFromModel(conditionList.getModel());
                    int[] sel = conditionList.getSelectedIndices();
                    for (int i = sel.length - 1; i >= 0; i--) {
                        if (sel[i] < ConList.size() - 1) {
                            ConList = swapList(ConList, sel[i], sel[i] + 1);
                            //set new position
                            sel[i] = sel[i] + 1;
                        }
                    }
                    conditionList.setModel(getModelFromList(ConList));
                    //set selected new position
                    conditionList.setSelectedIndices(sel);
                }

            }

        }
    }//GEN-LAST:event_DownListButActionPerformed

    private List<String> getListStringFromModel(ListModel model) {
        List<String> result = new LinkedList<String>();
        for (int i = 0; i < model.getSize(); i++) {
            result.add(model.getElementAt(i).toString());
        }
        return result;
    }

    private DefaultComboBoxModel getModelFromList(List<String> dataList) {
        Vector Items = new Vector();
        for (int i = 0; i < dataList.size(); i++) {
            Items.add(dataList.get(i));
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel(Items);
        return model;
    }

    private String getJAVAFileName(String name) {
        if (name.length() > 1) {
            String head = name.substring(0, 1);
            return head.toUpperCase() + name.substring(1).toLowerCase();
        } else {
            return name;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddOperateBut;
    private javax.swing.JRadioButton ConRadio;
    private javax.swing.JButton CreateModelBut;
    private javax.swing.JButton DownListBut;
    private javax.swing.JTextField FunctionTxt;
    private javax.swing.JButton GenerateBut;
    private javax.swing.JButton MoveSelAttBut;
    private javax.swing.JTextArea QueryArea;
    private javax.swing.JButton RemoveSelAttBut;
    private javax.swing.ButtonGroup SCGroup;
    private javax.swing.JRadioButton SelRadio;
    private javax.swing.JList SelectDBList;
    private javax.swing.JList SelectFieldList;
    private javax.swing.JTextField TagNameTxt;
    private javax.swing.JTextField TagValueTxt;
    private javax.swing.JLabel TitleCon;
    private javax.swing.JLabel TitleCondition;
    private javax.swing.JTextField TitleNameTxt;
    private javax.swing.JLabel TitleSelect;
    private javax.swing.JButton UPListBut;
    private javax.swing.JList conditionList;
    private javax.swing.JButton getBut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JComboBox operationSel;
    private javax.swing.JComboBox returnSel;
    private javax.swing.JTextField tablenameTxt;
    // End of variables declaration//GEN-END:variables
}
